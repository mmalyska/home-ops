global:
  additionalLabels: {}
  imageRegistry: ""
image:
  pullPolicy: IfNotPresent
  repository: ghcr.io/linuxserver/jellyfin
  tag: 10.10.7@sha256:63b40554e9a20dc1c655d07d7c57ea912350ef9582edbd3f6068e3ce8bf10256
jellyfin:
  annotations: {}
  replicaCount: 1
  env:
    - name: TZ
      value: CET
    - name: PUID
      value: "1001"
    - name: PGID
      value: "1001"
    - name: JELLYFIN_PublishedServerUrl
      value: <secret:jellyfin-service-ip>
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  service:
    ip: <secret:jellyfin-service-ip>
persistence:
  config:
    enabled: true
    accessMode: ReadWriteOnce
    size: 1Gi
    storageClass: ceph-block
  extraNfsMounts:
    - name: tv-shows
      mountPath: /data/tvshows
      nfsPath: /tv-series
      nfsServer: qnap.<secret:private-domain>
      readOnly: false
    - name: movies
      mountPath: /data/movies
      nfsPath: /movies
      nfsServer: qnap.<secret:private-domain>
      readOnly: false
resources:
  requests:
    gpu.intel.com/i915: 1
    cpu: 100m
    memory: 1000Mi
  limits:
    gpu.intel.com/i915: 1
    memory: 6000Mi
nodeSelector: {}
tolerations: []
affinity: {}
ingress:
  host: jellyfin.<secret:private-domain>
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/ingressEndpoint.hostname: jellyfin.<secret:private-domain>
    kubernetes.io/ingress.class: traefik
  labels: {}
