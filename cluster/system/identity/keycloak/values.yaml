global:
  additionalLabels: {}
  podAnnotations: {}
  podLabels: {}
  image:
    imagePullPolicy: IfNotPresent
server:
  name: server
  replicas: 1
  podAnnotations: {}
  podLabels: {}
  containerPort: 8080
  env:
    - name: KC_HOSTNAME
      value: "l.<secret:private-domain>"
    - name: KC_PROXY
      value: "edge"
    - name: KC_DB
      value: "postgres"
    - name: KC_DB_USERNAME
      valueFrom:
        secretKeyRef:
          name: keycloakdb-cnpg-app
          key: username
    - name: KC_DB_PASSWORD
      valueFrom:
        secretKeyRef:
          name: keycloakdb-cnpg-app
          key: password
    - name: KC_DB_URL_DATABASE
      value: app
    - name: KC_DB_URL_HOST
      value: keycloakdb-cnpg-rw
    - name: KC_FEATURES
      value: "docker"
    - name: KC_METRICS_ENABLED
      value: "true"
  envFrom: []
  image:
    imagePullPolicy: IfNotPresent
    repository: quay.io/keycloak/keycloak
    tag: "21.1.1"
  service:
    type: ClusterIP
    servicePortHttpName: http
    servicePortHttp: 80
    namedTargetPort: true
  ingress:
    host: l.<secret:private-domain>
    annotations:
      traefik.ingress.kubernetes.io/router.entrypoints: websecure
      traefik.ingress.kubernetes.io/router.tls: "true"
      traefik.ingress.kubernetes.io/ingressEndpoint.hostname: l.<secret:private-domain>
    external:
      annotations:
        kubernetes.io/ingress.class: traefik
    internal:
      annotations:
        kubernetes.io/ingress.class: traefik-internal
  readinessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 2
  livenessProbe:
    enabled: true
    failureThreshold: 5
    initialDelaySeconds: 10
    periodSeconds: 10
    successThreshold: 1
    timeoutSeconds: 2
  resources: {}
postgres:
  name: keycloakdb
  instances: 2
  storage:
    size: 2Gi
  bootstrap:
    recovery:
      source: crunchy-cluster
  externalClusters:
    - name: crunchy-cluster
      barmanObjectStore:
        serverName: keycloakdb-cnpg
        destinationPath: "s3://k8s-at-home-backup/cnpg/keycloak"
        endpointURL: <secret:s3_endpoint>
        s3Credentials:
          accessKeyId:
            name: keycloakdb-secrets
            key: S3_ACCESS_KEY_ID
          secretAccessKey:
            name: keycloakdb-secrets
            key: S3_ACCESS_SECRET_KEY
  monitoring:
    enablePodMonitor: true
  # backup:
  #   retentionPolicy: "10d"
  #   barmanObjectStore:
  #     destinationPath: "s3://k8s-at-home-backup/cnpg/keycloak"
  #     endpointURL: <secret:s3_endpoint>
  #     s3Credentials:
  #       accessKeyId:
  #         name: keycloakdb-secrets
  #         key: S3_ACCESS_KEY_ID
  #       secretAccessKey:
  #         name: keycloakdb-secrets
  #         key: S3_ACCESS_SECRET_KEY
  scheduledBackups:
    - name: keycloakdb-cnpg-backup
      spec:
        immediate: true
        schedule: "0 0 0 * * *"
        backupOwnerReference: self
