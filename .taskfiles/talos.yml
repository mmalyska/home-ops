---
version: "3"

vars:
  N: '{{ .N | default "1" }}'
  NODE:
    sh: "echo ${NODE:-192.168.48.{{ add .N 1 }}}"
  # renovate: datasource=github-releases depName=mmalyska/talos-images
  TALOS_VERSION: "v1.7.0"
  # renovate: datasource=github-releases depName=siderolabs/kubelet
  KUBERNETES_VERSION: "v1.29.4"

tasks:
  init:
    desc: Init talosctl and grab kubeconfig (task talos:init)
    cmds:
      - task: generate
      - task: generate-kubeconfig

  dashboard:
    desc: Show talos dashboard fot N node (task talos:dashboard)
    cmds:
      - task: generate
      - talosctl --talosconfig=provision/talos/clusterconfig/talosconfig --nodes {{ .NODE }} dashboard

  install:cni:
    desc: Install CNI and cert approver helm releases (task talos:cni)
    cmds:
      - kubectl kustomize provision/talos --enable-helm | kubectl apply -f -

  upgrade:k8s:
    dir: provision/talos
    desc: Upgrade Kubernetes to {{ .KUBERNETES_VERSION }} (task talos:upgrade:k8s)
    cmds:
      - task: init
      - talosctl --nodes {{ .NODE }} upgrade-k8s --to {{ .KUBERNETES_VERSION }}

  upgrade:all:
    desc: Upgrade all nodes to Talos version {{ .TALOS_VERSION }} (task talos:upgrade:all)
    dir: provision/talos
    cmds:
      - task: init
      # control-plane
      - task: upgrade
        vars: {NODE: 192.168.48.2, N: 1}
      - task: upgrade
        vars: {NODE: 192.168.48.3, N: 2}
      - task: upgrade
        vars: {NODE: 192.168.48.4, N: 3}
      - task: wait_for_health
        vars: {TIMEOUT: 10m}

  apply:restart:
    desc: Apply Talos config to a specific node with reboot (task talos:apply:restart N=1)
    dir: provision/talos
    cmds:
      - task: generate
      - task: wait_for_health
        vars: {TIMEOUT: 10m}
      - task: apply-config
        vars: {CLI_ARGS: "-m staged"}
      - talosctl reboot --nodes {{ .NODE }} --wait

  apply:
    desc: Apply Talos config to a specific node without reboot (task talos:apply N=1)
    dir: provision/talos
    cmds:
      - task: generate
      - task: wait_for_health
        vars: {TIMEOUT: 10m}
      - task: apply-config
        vars: {CLI_ARGS: "-m auto"}

  generate-kubeconfig:
    internal: true
    desc: Generate Talos kubeconfig (task talos:generate-kubeconfig)
    dir: provision/talos
    cmds:
      - cmd: talosctl --talosconfig=clusterconfig/talosconfig kubeconfig -f --nodes {{ .NODE }} $KUBECONFIG
        ignore_error: true
    status:
      - test -f $KUBECONFIG

  generate:
    internal: true
    desc: Generate Talos machine configurations (task talos:generate)
    dir: provision/talos
    cmds:
      - talhelper genconfig
    sources:
      - talconfig.yaml
      - talenv.sops.yaml
      - talenv.yaml
      - talsecret.sops.yaml
    generates:
      - clusterconfig/*.yaml
      - clusterconfig/talosconfig

  apply-config:
    internal: true
    desc: Apply Talos config to a specific node (task talos:apply N=0)
    dir: provision/talos
    cmds:
      - talosctl apply-config --nodes {{ .NODE }} --file clusterconfig/home-mc{{ .N }}.yaml {{ .CLI_ARGS }}

  upgrade:
    internal: true
    desc: Upgrade a single node to Talos version {{ .TALOS_VERSION }} (task talos:upgrade N=0)
    dir: provision/talos
    status:
      - talosctl version --nodes {{ .NODE }} --short | grep 'Tag.*{{ .TALOS_VERSION }}'
    cmds:
      - task: wait_for_health
        vars: {TIMEOUT: 10m}
      - task: apply-config
        vars: {NODE: "{{ .NODE }}", N: "{{ .N }}", CLI_ARGS: "-m staged"}
      - talosctl upgrade --nodes {{ .NODE }} --image ghcr.io/mmalyska/talos-installer:{{ .TALOS_VERSION }}

  wait_for_health:
    internal: true
    desc: Wait for services in cluster to be healthy
    cmds:
      # Ensure CephCluster is healthy
      - kubectl -n rook-ceph wait --for jsonpath='{.status.ceph.health}'='HEALTH_OK' --timeout {{ .TIMEOUT | default "30s" }} cephcluster rook-ceph
      # Ensure CloudNative-PG cluster has 2 ready instances
      - kubectl -n gitea wait --for jsonpath='{.status.readyInstances}'='2' --timeout {{ .TIMEOUT | default "30s" }} cluster giteadb-cnpg
      - kubectl -n identity wait --for jsonpath='{.status.readyInstances}'='2' --timeout {{ .TIMEOUT | default "30s" }} cluster keycloakdb-cnpg
