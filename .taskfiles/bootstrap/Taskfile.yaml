---
version: "3"

vars:
  BOOTSTRAP_RESOURCES_DIR: "{{.ROOT_DIR}}/.taskfiles/bootstrap/resources"

tasks:

  kubernetes:
    desc: Bootstrap a Talos Kubernetes cluster backed by argocd, sops, and rook
    prompt: Bootstrap a Talos Kubernetes cluster ... continue?
    cmds:
      - task: etcd
      - task: kubeconfig
      - task: apps
      - task: rook
      # - task: argocd
    preconditions:
      - talosctl config info >/dev/null 2>&1
      - test -f {{.TALOS_DIR}}/clusterconfig/talosconfig

  etcd:
    internal: true
    cmd: until talosctl --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 10; done

  kubeconfig:
    internal: true
    cmd: talosctl kubeconfig --nodes {{.TALOS_CONTROLLER}} --force $KUBECONFIG

  apps:
    internal: true
    cmds:
      - until kubectl wait --for=condition=Ready=False nodes --all --timeout=10m; do sleep 10; done
      - helmfile --quiet --file {{.TALOS_DIR}}/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl wait --for=condition=Ready nodes --all --timeout=10m; do sleep 10; done
    env:
      KUBERNETES_DIR: '{{.KUBERNETES_DIR}}'
    preconditions:
      - test -f {{.TALOS_DIR}}/apps/helmfile.yaml

  rook:
    internal: true
    cmds:
      - for: { var: nodes }
        task: rook-data
        vars:
          node: '{{.ITEM}}'
      - for: { var: mc1 }
        task: rook-disk
        vars:
          node: mc1
      - for: { var: mc2 }
        task: rook-disk
        vars:
          node: mc2
      - for: { var: mc3 }
        task: rook-disk
        vars:
          node: mc3
    vars:
      nodes: mc1 mc2 mc3

  rook-data:
    internal: true
    cmds:
      - envsubst < <(cat {{.BOOTSTRAP_RESOURCES_DIR}}/rook-data-job.tmpl.yaml) | kubectl apply -f -
      - bash {{.BOOTSTRAP_RESOURCES_DIR}}/wait-for-job.sh {{.job}} default
      - kubectl --namespace default wait job/{{.job}} --for condition=complete --timeout=1m
      - kubectl --namespace default logs job/{{.job}}
      - kubectl --namespace default delete job {{.job}}
    env:
      job: '{{.job}}'
      node: '{{.node}}'
    vars:
      job: wipe-data-{{.node}}
    preconditions:
      - test -f {{.BOOTSTRAP_RESOURCES_DIR}}/wait-for-job.sh
      - test -f {{.BOOTSTRAP_RESOURCES_DIR}}/rook-data-job.tmpl.yaml

  rook-disk:
    internal: true
    cmds:
      - envsubst < <(cat {{.BOOTSTRAP_RESOURCES_DIR}}/rook-disk-job.tmpl.yaml) | kubectl apply -f -
      - bash {{.BOOTSTRAP_RESOURCES_DIR}}/wait-for-job.sh {{.job}} default
      - kubectl --namespace default wait job/{{.job}} --for condition=complete --timeout=1m
      - kubectl --namespace default logs job/{{.job}}
      - kubectl --namespace default delete job {{.job}}
    env:
      job: '{{.job}}'
      node: '{{.node}}'
    vars:
      job: wipe-disk-{{.node}}-{{.serial | lower}}
    preconditions:
      - test -f {{.BOOTSTRAP_RESOURCES_DIR}}/wait-for-job.sh
      - test -f {{.BOOTSTRAP_RESOURCES_DIR}}/rook-disk-job.tmpl.yaml

  argocd:
    internal: true
    cmds:
      - sops --decrypt {{.KUBERNETES_DIR}}/bootstrap/argocd/age-key.secret.sops.yaml | kubectl apply --server-side --filename -
      - kubectl apply --server-side --kustomize {{.KUBERNETES_DIR}}/core/argocd
      - kubectl apply --server-side --kustomize {{.KUBERNETES_DIR}}/bootstrap/argocd
    preconditions:
      - test -f {{.ROOT_DIR}}/age.key
      - test -f {{.KUBERNETES_DIR}}/bootstrap/argocd/age-key.secret.sops.yaml
      - sops filestatus {{.KUBERNETES_DIR}}/bootstrap/argocd/age-key.secret.sops.yaml | jq --exit-status '.encrypted'
